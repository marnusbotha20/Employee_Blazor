// <auto-generated />
using System;
using Employee_Blazor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Employee_Blazor.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    [Migration("20191218123159_InitialDbCreate")]
    partial class InitialDbCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Employee_Blazor.Models.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Pretoria"
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Johannesburg"
                        });
                });

            modelBuilder.Entity("Employee_Blazor.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Name = "atWork Internet Solutions"
                        });
                });

            modelBuilder.Entity("Employee_Blazor.Models.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Coding 101",
                            Credits = 10
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "Coding 201",
                            Credits = 20
                        });
                });

            modelBuilder.Entity("Employee_Blazor.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1L,
                            City = "Pretoria",
                            DateOfBirth = new DateTime(1979, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "IT",
                            Email = "uncle.bob@gmail.com",
                            FirstName = "Uncle",
                            Gender = "Male",
                            LastName = "Bob",
                            PhoneNumber = "999-888-7777"
                        },
                        new
                        {
                            EmployeeId = 2L,
                            City = "Johannesburg",
                            DateOfBirth = new DateTime(1981, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Management",
                            Email = "jan.kirsten@gmail.com",
                            FirstName = "Jan",
                            Gender = "Male",
                            LastName = "Kirsten",
                            PhoneNumber = "111-222-3333"
                        });
                });

            modelBuilder.Entity("Employee_Blazor.Models.EmployeeCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.HasKey("CourseId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCourse");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            EmployeeId = 1L
                        },
                        new
                        {
                            CourseId = 2,
                            EmployeeId = 1L
                        },
                        new
                        {
                            CourseId = 1,
                            EmployeeId = 2L
                        });
                });

            modelBuilder.Entity("Employee_Blazor.Models.Employee", b =>
                {
                    b.HasOne("Employee_Blazor.Models.Company", "Company")
                        .WithMany("Employee")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Employee_Blazor.Models.EmployeeCourse", b =>
                {
                    b.HasOne("Employee_Blazor.Models.Courses", "Courses")
                        .WithMany("EmployeeCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee_Blazor.Models.Employee", "Employee")
                        .WithMany("EmployeeCourse")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
