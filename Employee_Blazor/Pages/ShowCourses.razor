@page "/ShowCourses"

@using Employee_Blazor.Service
@using Employee_Blazor.Models

@inject CourseService CourseService

<style>
    .table {
        margin-top: 25px;
    }
</style>
<h1>Course Management</h1>

<div>
    <div style="float:left">
        <button class="btn btn-primary" @onclick="@AddCourse">Add Course</button>
    </div>
    <div style="float:right; width:40%;">
        <div class="col-sm-6" style="float:left">
            <input class="form-control" type="text" placeholder="Search" @bind="@SearchString" />
        </div>
        <div>
            <button type="submit" class="btn btn-default btn-info" @onclick="@FilterCourse">Filter</button>
        </div>
    </div>
</div>
<div>
    @if (courseList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Course Name</th>
                    <th>Credits</th>
                    <th> No Of Employees</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in courseList)
                {
                    <tr>
                        <td>
                            @course.CourseId
                        </td>
                        <td>
                            @course.CourseName
                        </td>
                        <td>
                            @course.Credits
                        </td>
                        <td>
                            @CountCourses(course.CourseId)
                        </td>
                        <td>
                            <button class="btn btn-default" @onclick="@(async () => await EditCourse(course.CourseId))">Edit</button>
                            <button class="btn btn-danger" @onclick="@(async () => await DeleteConfirm(course.CourseId))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        if (isAdd)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">@modalTitle</h3>
                            <button type="button" class="close" @onclick="@CloseModal">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label for="Name" class="control-label">Course Name</label>
                                            <input for="Name" class="form-control" @bind="@course.CourseName" />
                                        </div>
                                    </div>

                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="form-group">
                                            <label for="LastName" class="control-label">Number of Credits</label>
                                            <input for="LastName" class="form-control" @bind="@course.Credits" />
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-block btn-info" @onclick="@(async () => await SaveCourse())" data-dismiss="modal">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        if (isDelete)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete Course</h3>
                        </div>
                        <div class="modal-body">
                            <h6 class="modal-title">@modalTitle</h6>
                            <table class="table">
                                <tr>
                                    <td>Course Name</td>
                                    <td>@course.CourseName</td>
                                </tr>
                                <tr>
                                    <td>Number of Credits</td>
                                    <td>@course.Credits</td>
                                </tr>
                            </table>
                        </div>
                        <div class="modal-footer">
                            @if (!isLinked)
                            {
                                <button class="btn btn-danger" @onclick="@(async () => await DeleteCourse(@course.CourseId))" data-dismiss="modal">YES</button>
                                <button class="btn btn-warning" @onclick="@CloseModal">NO</button>
                            }
                            else
                            {
                                <button class="btn btn-warning" @onclick="@CloseModal">Close</button>
                            }

                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    protected string modalTitle { get; set; }
    protected Boolean isDelete = false;
    protected Boolean isAdd = false;
    protected Boolean isLinked = false;

    protected string SearchString { get; set; }
    protected List<Courses> courseList = new List<Courses>();
    protected Courses course = new Courses();

    protected int NoCourses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCourses();
    }

    protected async Task GetCourses()
    {
        courseList = await CourseService.GetCourses();
    }

    protected async Task FilterCourse()
    {
        await GetCourses();
        if (SearchString != "")
        {
            courseList = courseList.Where(x => x.CourseName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
    }

    protected void AddCourse()
    {
        course = new Courses();
        this.modalTitle = "Add Course";
        this.isAdd = true;
    }

    protected async Task EditCourse(int ID)
    {
        course = await CourseService.CourseDetails(ID);
        this.modalTitle = "Edit Course";
        this.isAdd = true;
    }

    protected async Task SaveCourse()
    {
        if (course.CourseId != 0)
        {
            await Task.Run(() =>
            {
                CourseService.EditCourse(course);
            });
        }
        else
        {
            await Task.Run(() =>
            {
                CourseService.CreateCourse(course);
            });
        }
        this.isAdd = false;
        await GetCourses();
    }

    protected async Task DeleteConfirm(int ID)
    {
        var numberOfLinkedCourses = CountCourses(ID);
        this.isDelete = true;

        if (numberOfLinkedCourses > 0)
        {
            isLinked = true;
            this.modalTitle = "Unable to delete, Course is linked to Employees";
        }
        else
        {
            course = await CourseService.CourseDetails(Convert.ToInt32(ID));
            this.modalTitle = "Do you want to delete this Course ??";
        }
    }

    protected async Task DeleteCourse(int ID)
    {
        await Task.Run(() =>
        {
            CourseService.DeleteCourse(ID);
        });
        this.isDelete = false;
        await GetCourses();
    }

    protected void CloseModal()
    {
        this.isAdd = false;
        this.isDelete = false;
    }

    protected int CountCourses(long Id)
    {

        var count = CourseService.CountCourse(Id);
        return count;
    }
}
